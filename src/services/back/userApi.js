// src/services/back/userApi.js
// üî• Î∞±ÏóîÎìú API ÏßÅÏ†ë Ìò∏Ï∂úÏö© (AuthContext Ïô∏Î∂ÄÏóêÏÑú ÏÇ¨Ïö©Ïãú)

const SERVER_URL = import.meta.env.VITE_API_BASE_URL;

// üî• Í∏∞Î≥∏ API Ìò∏Ï∂ú Ìï®Ïàò
const apiCall = async (endpoint, options = {}) => {
  const url = `${SERVER_URL}${endpoint}`;
  const defaultOptions = {
    credentials: 'include', // Spring Boot ÏÑ∏ÏÖò Ïø†ÌÇ§ Ìè¨Ìï®
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  };

  try {
    console.log(`üöÄ API Ìò∏Ï∂ú: ${options.method || 'GET'} ${url}`);
    const response = await fetch(url, defaultOptions);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    // Content-TypeÏóê Îî∞Îùº Îã§Î•¥Í≤å Ï≤òÎ¶¨
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      const result = await response.json();
      console.log(`‚úÖ API ÏùëÎãµ: ${endpoint}`, result);
      return result;
    } else {
      const result = await response.text();
      console.log(`‚úÖ API ÏùëÎãµ: ${endpoint}`, result);
      return result;
    }
  } catch (error) {
    console.error(`‚ùå API ÏóêÎü¨: ${endpoint}`, error);
    throw error;
  }
};

// üî• Î°úÍ∑∏Ïù∏ API
export const login = async (credentials) => {
  return await apiCall('/do.login', {
    method: 'POST',
    body: JSON.stringify({
      loginId: credentials.id,
      loginPw: credentials.password,
    }),
  });
};

// üî• Î°úÍ∑∏ÏïÑÏõÉ API
export const logout = async () => {
  return await apiCall('/do.logout', {
    method: 'POST',
  });
};

// üî• ÏÑ∏ÏÖò Í≤ÄÏ¶ù API
export const checkSession = async (loginId) => {
  return await apiCall('/do.logincheck', {
    method: 'POST',
    body: JSON.stringify({ regid: loginId }),
  });
};

// üî• ÌöåÏõêÍ∞ÄÏûÖ API
export const register = async (userData) => {
  const formData = new FormData();
  formData.append('id', userData.id);
  formData.append('pw', userData.password);
  formData.append('nick', userData.nickname);
  formData.append('birth', userData.birthDate);

  if (userData.profilePhoto) {
    formData.append('photoTemp', userData.profilePhoto);
  }

  return await apiCall('/do.registerpage', {
    method: 'POST',
    headers: {}, // FormDataÏùº ÎïåÎäî Content-Type Ìó§Îçî Ï†úÍ±∞
    body: formData,
  });
};

// üî• ÏïÑÏù¥Îîî Ï§ëÎ≥µ ÌôïÏù∏ API
export const checkIdDuplicate = async (id) => {
  return await apiCall('/do.Idcheck', {
    method: 'POST',
    body: JSON.stringify({ regid: id }),
  });
};

// üî• ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µ ÌôïÏù∏ API
export const checkNicknameDuplicate = async (nickname) => {
  return await apiCall('/do.NickCheck', {
    method: 'POST',
    body: JSON.stringify({ regnc: nickname }),
  });
};

// üî• ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå API
export const getUserInfo = async (loginId) => {
  return await apiCall('/do.MeminfoCheck', {
    method: 'POST',
    body: JSON.stringify({ regid: loginId }),
  });
};

// üî• ÌöåÏõêÏ†ïÎ≥¥ ÏàòÏ†ï API
export const updateUserInfo = async (updateData, currentPassword, loginId) => {
  const formData = new FormData();
  formData.append('eid', loginId);
  formData.append('ecurpw', currentPassword);

  if (updateData.nickname) formData.append('enick', updateData.nickname);
  if (updateData.password) formData.append('epw', updateData.password);
  if (updateData.profilePhoto) formData.append('ephoto', updateData.profilePhoto);

  return await apiCall('/member.info.edit', {
    method: 'POST',
    headers: {}, // FormDataÏùº ÎïåÎäî Content-Type Ìó§Îçî Ï†úÍ±∞
    body: formData,
  });
};

// üî• ÌöåÏõêÌÉàÌá¥ API
export const deleteAccount = async (password) => {
  return await apiCall('/member.exit', {
    method: 'POST',
    body: JSON.stringify({ regid: password }),
  });
};

// üî• ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ URL ÏÉùÏÑ±
export const getProfileImageUrl = (photoName) => {
  if (!photoName) return null;
  return `${SERVER_URL}/member.photo/${photoName}`;
};

// üî• Ï†ÑÏ≤¥ API Í∞ùÏ≤¥
const userApi = {
  login,
  logout,
  checkSession,
  register,
  checkIdDuplicate,
  checkNicknameDuplicate,
  getUserInfo,
  updateUserInfo,
  deleteAccount,
  getProfileImageUrl,
};

export default userApi;
